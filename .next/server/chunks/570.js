exports.id=570,exports.ids=[570],exports.modules={4817:(e,t,n)=>{Promise.resolve().then(n.bind(n,9034)),Promise.resolve().then(n.bind(n,1747)),Promise.resolve().then(n.t.bind(n,4064,23))},3125:(e,t,n)=>{Promise.resolve().then(n.t.bind(n,6114,23)),Promise.resolve().then(n.t.bind(n,2639,23)),Promise.resolve().then(n.t.bind(n,9727,23)),Promise.resolve().then(n.t.bind(n,9671,23)),Promise.resolve().then(n.t.bind(n,1868,23)),Promise.resolve().then(n.t.bind(n,4759,23)),Promise.resolve().then(n.t.bind(n,2816,23))},9034:(e,t,n)=>{"use strict";n.d(t,{default:()=>o});var a=n(8819),i=n(7266);let o=({slotId:e,adFormat:t="auto",responsive:n=!0})=>((0,i.useEffect)(()=>{},[]),(0,a.jsx)("ins",{className:"adsbygoogle",style:{display:"block"},"data-ad-client":"ca-pub-8017840986434846","data-ad-slot":e,"data-ad-format":t,"data-full-width-responsive":n?"true":"false"}))},1747:(e,t,n)=>{"use strict";n.d(t,{default:()=>d});var a=n(8819),i=n(434),o=n(5047),r=n(8900),s=n.n(r);n(2307);var l=n(9894),c=n(7266);function d(){let e=(0,o.usePathname)(),[t,n]=(0,c.useState)(!1);return(0,a.jsxs)("nav",{className:s().nav,"aria-label":"Primary",children:[(0,a.jsx)("a",{className:"skip-link",href:"#main",children:"Skip to content"}),(0,a.jsxs)("div",{className:`container ${s().inner}`,children:[(0,a.jsxs)(i.default,{href:"/",className:s().brand,"aria-label":"Khelira home",children:[(0,a.jsx)(l.iVx,{className:s().brandIcon,"aria-hidden":"true"}),(0,a.jsx)("span",{children:"Khelira"})]}),(0,a.jsxs)("div",{className:s().links,role:"menubar",children:[(0,a.jsx)(i.default,{className:`${s().link} ${"/"===e?s().active:""}`,href:"/",children:"Home"}),(0,a.jsx)(i.default,{className:s().link,href:"/projects",children:"Projects"}),(0,a.jsx)(i.default,{className:s().link,href:"/about",children:"About"}),(0,a.jsx)(i.default,{className:s().link,href:"/contact",children:"Contact"}),(0,a.jsx)(i.default,{className:s().link,href:"/typingtest",children:"Typing Test"}),(0,a.jsx)(i.default,{className:s().link,href:"/learn",children:"Learn"})]}),(0,a.jsx)("button",{className:`btn ${s().menuBtn}`,"aria-expanded":t,"aria-controls":"drawer",onClick:()=>n(e=>!e),children:t?(0,a.jsx)(l.fVU,{"aria-hidden":"true",className:"close-button"}):(0,a.jsx)(l.Fm7,{"aria-hidden":"true"})})]}),t&&(0,a.jsxs)("div",{id:"drawer",className:s().drawer,role:"dialog","aria-modal":"true",children:[(0,a.jsx)(i.default,{href:"/",onClick:()=>n(!1),children:"Home"}),(0,a.jsx)(i.default,{href:"/projects",onClick:()=>n(!1),children:"Projects"}),(0,a.jsx)(i.default,{href:"/about",onClick:()=>n(!1),children:"About"}),(0,a.jsx)(i.default,{href:"/contact",onClick:()=>n(!1),children:"Contact"}),(0,a.jsx)(i.default,{href:"/typingtest",onClick:()=>n(!1),children:"Typing Test"}),(0,a.jsx)(i.default,{href:"/learn",onClick:()=>n(!1),children:"Learn"})]})]})}},8611:(e,t,n)=>{"use strict";n.d(t,{l:()=>a});let a=e=>e?e.toString().toLowerCase().trim().replace(/\s+/g,"-").replace(/[^\w\-]+/g,"").replace(/\-\-+/g,"-"):""},2721:e=>{e.exports={learnWrapper:"learn_learnWrapper__4rF9D",content:"learn_content__EKsg_",sidebar:"learn_sidebar__3SDHN",activeLesson:"learn_activeLesson__GRpdH",allTopicsBtn:"learn_allTopicsBtn__Hd803",toggleSidebarBtn:"learn_toggleSidebarBtn__GCWpP",searchInput:"learn_searchInput__j9F0E",searchBox:"learn_searchBox__iz7vh",resultList:"learn_resultList__4RhIQ",resultItem:"learn_resultItem__PwMra",breadcrumb:"learn_breadcrumb__c2hrC",currentCrumb:"learn_currentCrumb__EleIw",codeBlock:"learn_codeBlock__0kVHi",navButtons:"learn_navButtons__nfBLR",disabled:"learn_disabled__fdVVH",topicGrid:"learn_topicGrid__5spsQ",topicCard:"learn_topicCard__ncmAj",open:"learn_open__qWx0g",overlay:"learn_overlay___1oSf"}},5669:e=>{e.exports={footer:"Footer_footer__pQtti",cols:"Footer_cols__FYdso",col:"Footer_col__WMzcr",copy:"Footer_copy__KUC9W"}},8900:e=>{e.exports={nav:"Navbar_nav__yFFPE",overlay:"Navbar_overlay__5SUzk",inner:"Navbar_inner__Cumf_",brand:"Navbar_brand__JWn4W",brandIcon:"Navbar_brandIcon__Wzflw",links:"Navbar_links__puXTb",link:"Navbar_link__Ssa7S",active:"Navbar_active__qyFWv",menuBtn:"Navbar_menuBtn__zSLsp",drawer:"Navbar_drawer__wAZGS"}},9569:(e,t,n)=>{"use strict";n.a(e,async(e,a)=>{try{n.r(t),n.d(t,{default:()=>c,metadata:()=>d});var i=n(9351);n(7633);var o=n(9573),r=n(7684),s=n(190),l=e([o,r]);[o,r]=l.then?(await l)():l;let d={metadataBase:new URL("https://khelira.com"),title:{default:"Khelira — Play Minimal, Win Big",template:"%s | Khelira"},description:"Khelira (खेलिरा) — a modern, dark, minimalist playground for web games and experiments.",alternates:{canonical:"/"},openGraph:{title:"Khelira — Play Minimal, Win Big",description:"A visually memorable gaming site with modern dark theme.",url:"https://khelira.com",siteName:"Khelira",images:[{url:"/logo.svg",width:256,height:256}],locale:"en_US",type:"website"}};function c({children:e}){return(0,i.jsx)("html",{lang:"en",children:(0,i.jsxs)("body",{children:[(0,i.jsx)(o.default,{}),(0,i.jsx)("main",{id:"main",className:"container",children:e}),(0,i.jsx)(r.Z,{}),(0,i.jsx)(s.default,{async:!0,src:"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-8017840986434846",crossOrigin:"anonymous",strategy:"afterInteractive"})]})})}a()}catch(e){a(e)}})},2903:(e,t,n)=>{"use strict";n.a(e,async(e,a)=>{try{n.r(t),n.d(t,{default:()=>e});var i=n(1851);let e=(await (0,i.createProxy)(String.raw`D:\code\khelira_me\khelira_next\components\AdUnit.js`)).default;a()}catch(e){a(e)}},1)},7684:(e,t,n)=>{"use strict";n.a(e,async(e,a)=>{try{n.d(t,{Z:()=>d});var i=n(9351),o=n(5669),r=n.n(o);n(7633);var s=n(6024),l=n(2903),c=e([l]);function d(){return(0,i.jsx)(i.Fragment,{children:(0,i.jsx)("footer",{className:r().footer,children:(0,i.jsxs)("div",{className:"container",children:[(0,i.jsx)("div",{className:"ad-container",children:(0,i.jsx)(l.default,{slotId:"8345298729"})}),(0,i.jsxs)("div",{className:r().cols,children:[(0,i.jsxs)("div",{className:r().col,children:[(0,i.jsx)("h4",{children:"Khelira"}),(0,i.jsx)("p",{children:"Minimal, modern, and memorable playground of web games."})]}),(0,i.jsxs)("div",{className:r().col,children:[(0,i.jsx)("h4",{children:"Explore"}),(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:(0,i.jsx)("a",{href:"/projects",children:"Projects"})}),(0,i.jsx)("li",{children:(0,i.jsx)("a",{href:"/gamerules",children:"Game Rules"})}),(0,i.jsx)("li",{children:(0,i.jsx)("a",{href:"/learn",children:"Learn - Tutorials"})})]})]}),(0,i.jsxs)("div",{className:r().col,children:[(0,i.jsx)("h4",{children:"Connect"}),(0,i.jsxs)("p",{children:[(0,i.jsx)("a",{href:"https://github.com","aria-label":"GitHub",children:(0,i.jsx)(s.hJX,{"aria-hidden":"true"})})," ",(0,i.jsx)("a",{href:"https://x.com","aria-label":"Twitter / X",children:(0,i.jsx)(s.LCd,{"aria-hidden":"true"})})," ",(0,i.jsx)("a",{href:"/","aria-label":"Website",children:(0,i.jsx)(s.ssk,{"aria-hidden":"true"})})]})]})]}),(0,i.jsxs)("div",{className:r().copy,children:["\xa9 ",new Date().getFullYear()," Khelira. All rights reserved."]})]})})})}l=(c.then?(await c)():c)[0],a()}catch(e){a(e)}})},9573:(e,t,n)=>{"use strict";n.a(e,async(e,a)=>{try{n.r(t),n.d(t,{default:()=>e});var i=n(1851);let e=(await (0,i.createProxy)(String.raw`D:\code\khelira_me\khelira_next\components\Navbar.jsx`)).default;a()}catch(e){a(e)}},1)},7633:()=>{},2307:()=>{},281:e=>{"use strict";e.exports=JSON.parse('{"html":{"title":"HTML","levels":[{"level":1,"title":"What is HTML","description":" HTML stands for **HyperText Markup Language**. It is the standard language used to create web pages. HTML uses **tags** to define elements on a page. \\nTags are written inside angle brackets like <tagname>. ","example":"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>My First Page</title>\\n  </head>\\n  <body>\\n    Hello World!\\n  </body>\\n</html>"},{"level":3,"title":"Paragraphs","description":"Paragraphs are blocks of text. Use `<p>` tag to write them.","example":"<p>Hello, this is my first paragraph.</p>\\n<p>I love learning HTML!</p>"},{"level":4,"title":"Links","description":"Links let you go from one page to another. Use the `<a>` tag with `href` (the web address).","example":"<a href=\'https://www.google.com\'>Go to Google</a>"},{"level":5,"title":"Images","description":"Images make websites look nice. Use `<img>` tag with `src` for the file and `alt` for text if the image doesn’t load.","example":"<img src=\'cat.jpg\' alt=\'Cute Cat\'>"},{"level":6,"title":"Lists","description":"Lists help organize items. There are two types:\\n\\n- **Ordered list `<ol>`** → numbered\\n- **Unordered list `<ul>`** → bullet points","example":"<ol>\\n  <li>First</li>\\n  <li>Second</li>\\n</ol>\\n\\n<ul>\\n  <li>Apples</li>\\n  <li>Bananas</li>\\n</ul>"},{"level":7,"title":"Tables","description":"Tables help to show information in rows and columns. Use `<table>`, `<tr>` (row), `<td>` (cell).","example":"<table border=\'1\'>\\n  <tr><th>Name</th><th>Age</th></tr>\\n  <tr><td>Alice</td><td>10</td></tr>\\n  <tr><td>Bob</td><td>12</td></tr>\\n</table>"},{"level":8,"title":"Forms","description":"Forms are used to take input from users (like a login form). Use `<form>` with `<input>` and `<button>`.","example":"<form>\\n  Name: <input type=\'text\'><br>\\n  Password: <input type=\'password\'><br>\\n  <button>Submit</button>\\n</form>"},{"level":9,"title":"Audio","description":"The `<audio>` tag is used to play sound. You can add `controls` so the user can play/pause.","example":"<audio controls>\\n  <source src=\'sound.mp3\' type=\'audio/mpeg\'>\\n  Your browser does not support the audio tag.\\n</audio>"},{"level":10,"title":"Video","description":"The `<video>` tag is used to play videos. You can add `controls` for play/pause.","example":"<video width=\'320\' height=\'240\' controls>\\n  <source src=\'movie.mp4\' type=\'video/mp4\'>\\n  Your browser does not support the video tag.\\n</video>"},{"level":11,"title":"Semantic Tags","description":"Semantic tags describe meaning. Examples:\\n\\n- `<header>` → top of page\\n- `<nav>` → menu\\n- `<main>` → main content\\n- `<footer>` → bottom of page\\n\\nThey make code easier to read.","example":"<header>Welcome to My Site</header>\\n<nav>Menu here</nav>\\n<main>Main content</main>\\n<footer>Copyright 2025</footer>"},{"level":12,"title":"Iframes","description":"An `<iframe>` shows another webpage inside your page. Like a window inside a window.","example":"<iframe src=\'https://www.wikipedia.org\' width=\'400\' height=\'300\'></iframe>"},{"level":13,"title":"Meta Tags","description":"Meta tags give **information about the page**. They go inside `<head>`. For example, `charset` tells the text type and `viewport` makes the site mobile friendly.","example":"<head>\\n  <meta charset=\'UTF-8\'>\\n  <meta name=\'viewport\' content=\'width=device-width, initial-scale=1.0\'>\\n</head>"},{"level":14,"title":"Forms Advanced","description":"Forms can have many input types:\\n\\n- `text`\\n- `email`\\n- `number`\\n- `checkbox`\\n- `radio`\\n- `date`\\n\\nThese help collect different data.","example":"<form>\\n  Email: <input type=\'email\'><br>\\n  Age: <input type=\'number\'><br>\\n  <input type=\'checkbox\'> I agree<br>\\n  <input type=\'radio\' name=\'gender\'> Male\\n  <input type=\'radio\' name=\'gender\'> Female\\n</form>"},{"level":15,"title":"Forms + Labels","description":"Labels connect text with inputs, making forms easier to use.","example":"<form>\\n  <label for=\'name\'>Name:</label>\\n  <input type=\'text\' id=\'name\'>\\n</form>"},{"level":16,"title":"Div and Span","description":"`<div>` is a box for grouping elements. `<span>` is used for styling small parts of text.","example":"<div style=\'background: lightblue;\'>\\n  <p>This is inside a div.</p>\\n</div>\\n<p>This is <span style=\'color:red;\'>red</span> text.</p>"},{"level":17,"title":"Comments","description":"Comments are notes for developers. They don’t show on the page. Use `<!-- -->`.","example":"<!-- This is a comment -->\\n<p>Hello World</p>"},{"level":18,"title":"Entities","description":"Some symbols don’t work in HTML. Use **entities** instead:\\n\\n- `&lt;` → <\\n- `&gt;` → >\\n- `&amp;` → &\\n- `&copy;` → \xa9","example":"<p>2 &lt; 5</p>\\n<p>Copyright &copy; 2025</p>"},{"level":19,"title":"HTML5 Features","description":"HTML5 brought new features:\\n\\n- `<canvas>` → draw shapes\\n- `<video>` and `<audio>` → play media\\n- `<localStorage>` → store data in browser","example":"<canvas id=\'myCanvas\' width=\'200\' height=\'100\' style=\'border:1px solid black;\'></canvas>"},{"level":20,"title":"Best Practices","description":"Some rules to follow:\\n\\n- Always close tags\\n- Use lowercase for tags\\n- Keep code neat and clean\\n- Use semantic tags\\n- Add `alt` text for images","example":"<!DOCTYPE html>\\n<html>\\n<head><title>Good Practice</title></head>\\n<body>\\n  <header>\\n    <h1>My Website</h1>\\n  </header>\\n  <main>\\n    <p>This is clean and simple code.</p>\\n  </main>\\n</body>\\n</html>"}]},"css":{"title":"CSS","levels":[{"level":1,"title":"Selectors","description":"CSS selectors target HTML elements you want to style. Common selectors are element (like p), class (.class), and id (#id).","example":"p { color: red; }\\n#main { padding: 10px; }\\n.box { background: yellow; }"},{"level":2,"title":"Universal Selector","description":"The universal selector * selects every element on the page for styling.","example":"* { font-family: Arial; color: blue; }"},{"level":3,"title":"Grouping Selectors","description":"Group multiple selectors to apply the same style to them, separated by commas.","example":"h1, h2, p { text-align: center; color: purple; }"},{"level":4,"title":"Colors","description":"CSS lets you set background and text colors using names, hex codes, or rgb values.","example":"body { background: #f0f0f0; }\\nh1 { color: green; }\\ndiv { border: 2px solid #333; }"},{"level":5,"title":"Fonts","description":"Change the font family, size, and style to make text look the way you want.","example":"p { font-family: \'Verdana\'; font-size: 16px; font-style: italic; }"},{"level":6,"title":"Box Model","description":"Every element is a box with margin (space outside), border, and padding (space inside).","example":"div { margin: 10px; padding: 15px; border: 1px solid #888; }"},{"level":7,"title":"Width and Height","description":"Set how big elements appear using width and height in px, %, etc.","example":"img { width: 120px; height: 80px; }"},{"level":8,"title":"Backgrounds","description":"Add colors, gradients, or images as the background of elements.","example":"body { background-image: url(\'photo.jpg\'); }\\n.box { background: linear-gradient(orange, yellow); }"},{"level":9,"title":"Text Alignment & Spacing","description":"Align text and control its spacing: left, right, center; line height; letter spacing.","example":"h2 { text-align: center; }\\np { line-height: 1.8; letter-spacing: 1px; }"},{"level":10,"title":"Display & Position","description":"Choose how elements behave and where they’re placed: block, inline, fixed, absolute.","example":".menu { display: block; position: fixed; top: 0; right: 0; }"},{"level":11,"title":"Flexbox","description":"Flexbox is a modern way to arrange items in rows or columns that adjust automatically.","example":".container { display: flex; flex-direction: row; justify-content: space-between; }"},{"level":12,"title":"Responsive Design","description":"Media queries make designs adapt to different screen sizes, for phones and desktops.","example":"@media (max-width: 600px) { h1 { font-size: 18px; } .sidebar { display: none; } }"},{"level":13,"title":"Hover Effects","description":"Change the style of elements when the mouse is over them using :hover selectors.","example":"a:hover { color: orange; }\\nbutton:hover { background: lightblue; }"},{"level":14,"title":"Transitions","description":"Make style changes smooth using transition, like animated background color on hover.","example":"button { transition: background 0.3s; }\\nbutton:hover { background: teal; }"},{"level":15,"title":"Shadows","description":"Add drop shadows to boxes or text for a layered, modern look.","example":".card { box-shadow: 2px 2px 8px #ccc; }\\nh1 { text-shadow: 1px 1px 3px gray; }"},{"level":16,"title":"Border Radius","description":"Make corners rounded for boxes, buttons, images, etc.","example":"img { border-radius: 50%; }\\n.button { border-radius: 8px; }"},{"level":17,"title":"Lists Styling","description":"Style bullet points, numbers, and spacing of lists for a custom look.","example":"ul { list-style-type: circle; padding-left: 20px; }\\nol { list-style-type: upper-alpha; }"},{"level":18,"title":"Z-index","description":"Use z-index to stack elements on top of or below each other when they overlap.","example":".modal { position: absolute; z-index: 10; }"},{"level":19,"title":"Opacity","description":"Control how transparent an element is with opacity.","example":".overlay { opacity: 0.5; }"},{"level":20,"title":"Comments","description":"Add comments in CSS using /* ... */ to explain your code. Browsers ignore comments.","example":"/* This is a comment in CSS */\\nbody { color: black; }"},{"level":21,"title":"Importing CSS","description":"Reuse code by importing CSS from another file using @import.","example":"@import url(\'theme.css\');"},{"level":22,"title":"Gradients","description":"Create beautiful backgrounds with multiple colors using CSS gradients.","example":"body { background: linear-gradient(to right, #3498db, #e74c3c); }"},{"level":23,"title":"Text Truncation","description":"Truncate (cut off) long text and add ... using text-overflow.","example":".truncate { width: 150px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }"}]},"Javascript":{"title":"Javascript","levels":[{"level":1,"title":"Introduction to JavaScript","description":"JavaScript is a powerful programming language used mainly to add interactivity to websites. It runs directly in the browser allowing dynamic content such as responding to clicks, validating forms, or updating page content without reloading. Beyond web browsers, JavaScript also powers servers, mobile apps, and more, making it a versatile language.","example":"console.log(\\"Hello, World!\\");"},{"level":2,"title":"Variables and Data Types","description":"Variables in JavaScript are containers to store data values. You can declare variables using \'let\', \'const\', or \'var\' (modern practice favors \'let\' and \'const\'). JavaScript supports various data types: Number for all numeric values, String for text, Boolean for true/false, null for intentional empty value, undefined for unassigned variables, Object for complex data, and Array for ordered lists.","example":"let age = 30;\\nconst name = \\"Alice\\";\\nlet isStudent = false;"},{"level":3,"title":"Operators","description":"Operators perform operations on variables and values. Arithmetic operators help perform calculations (+, -, *, /, %). Assignment operators assign values (=, +=, -=). Comparison operators (==, ===, !=, !==, >, <) are used to compare values. Logical operators (&&, ||, !) combine multiple conditions or negate them.","example":"let x = 5 + 3;  // 8\\nlet isEqual = (x === 8); // true\\nlet isValid = (x > 5 && x < 10); // true"},{"level":4,"title":"Functions","description":"Functions are reusable blocks of code designed to perform a specific task. They can accept parameters as inputs and return outputs. Functions help organize code, reduce repetition, and improve readability. Functions can be declared traditionally, as function expressions, or using arrow function syntax introduced in ES6.","example":"function greet(name) {\\n  return \\"Hello, \\" + name + \\"!\\";\\n}\\nconsole.log(greet(\\"Bob\\"));"},{"level":5,"title":"Conditional Statements","description":"Conditional statements let your code make decisions by running different code blocks based on true or false conditions. The \'if\', \'else if\', and \'else\' blocks allow multiple pathways. The switch statement provides an efficient way to select among many exact matches.","example":"let score = 85;\\nif (score > 90) {\\n  console.log(\\"Excellent!\\");\\n} else if (score > 70) {\\n  console.log(\\"Good job!\\");\\n} else {\\n  console.log(\\"Keep practicing!\\");\\n}"},{"level":6,"title":"Loops","description":"Loops allow you to repeat code multiple times, saving effort and code space. The \'for\' loop runs a set number of times, \'while\' repeats while a condition is true, and \'do...while\' runs at least once before checking the condition. Loops are essential for iterating over arrays and handling repetitive tasks.","example":"for (let i = 1; i <= 5; i++) {\\n  console.log(i);\\n}"},{"level":7,"title":"Arrays","description":"Arrays store ordered collections of data. Each element has a numeric index starting at zero. Arrays can hold any data type, including other arrays or objects. Common array methods include push (add to end), pop (remove last), shift, unshift, map, filter, and reduce, to manipulate and transform data.","example":"let fruits = [\\"apple\\", \\"banana\\", \\"cherry\\"];\\nconsole.log(fruits[1]); // banana\\nfruits.push(\\"date\\");"},{"level":8,"title":"Objects","description":"Objects are collections of key-value pairs that model real-world entities. Keys (properties) are strings, and values can be any type, including functions (called methods). Objects enable encapsulating data and behavior, a core part of JavaScript\'s flexibility.","example":"let person = {\\n  name: \\"Charlie\\",\\n  age: 30,\\n  greet: function() { console.log(\\"Hi!\\"); }\\n};\\nconsole.log(person.name);\\nperson.greet();"},{"level":9,"title":"DOM Manipulation","description":"The Document Object Model (DOM) is a programming interface for HTML documents. JavaScript can select, modify, add, or delete HTML elements dynamically by manipulating the DOM. This capability powers interactive interfaces like content updates without page reloads, animations, and event handling.","example":"const heading = document.querySelector(\'h1\');\\nheading.textContent = \'Hello from JavaScript!\';"},{"level":10,"title":"Events","description":"Events represent user interactions or browser actions like clicks, typing, or loading a page. JavaScript responds to events by attaching event listeners to elements, running functions when events occur. This interactivity makes websites dynamic and user-friendly.","example":"button.addEventListener(\'click\', function() {\\n  alert(\'Button clicked!\');\\n});"},{"level":11,"title":"Advanced Functions","description":"Advanced function techniques include closures (functions retaining access to their lexical scope), higher-order functions (functions that take or return other functions), recursion (functions calling themselves), and arrow functions (concise syntax and different \'this\' binding). These empower cleaner, modular code.","example":"const add = (a, b) => a + b;\\nfunction factorial(n) {\\n  if (n <= 1) return 1;\\n  return n * factorial(n - 1);\\n}"},{"level":12,"title":"Asynchronous JavaScript","description":"JavaScript runs in a single thread but handles asynchronous tasks like data fetching or timers using callbacks, promises, and async/await. These patterns prevent blocking the program while waiting for operations to complete, ensuring smooth user experiences.","example":"fetch(\'https://api.example.com/data\')\\n  .then(response => response.json())\\n  .then(data => console.log(data));\\n\\nasync function getData() {\\n  const response = await fetch(\'https://api.example.com/data\');\\n  const data = await response.json();\\n  console.log(data);\\n}"},{"level":13,"title":"Error Handling","description":"JavaScript provides try-catch blocks to handle errors gracefully without stopping the entire program. Developers catch exceptions, log errors, and provide fallback behavior, improving program stability and user experience.","example":"try {\\n  let result = riskyOperation();\\n} catch (error) {\\n  console.error(\'Error:\', error.message);\\n}"},{"level":14,"title":"ES6+ Features","description":"Modern JavaScript (ES6 and later) introduces enhancements like template literals (for easier string formatting), destructuring (extract values from arrays/objects), spread/rest operators, classes for object-oriented programming, modules for code organization, and many others making code concise and robust.","example":"const person = {name: \'Alice\', age: 25};\\nconst {name, age} = person;\\nconsole.log(`${name} is ${age} years old.`);"},{"level":15,"title":"Modules","description":"Modules let you split your code into separate files and reuse code by exporting and importing variables, functions, or classes. This helps keep large applications organized and maintainable.","example":"// math.js\\nexport function add(a, b) { return a + b; }\\n\\n// main.js\\nimport { add } from \'./math.js\';\\nconsole.log(add(2, 3));"},{"level":16,"title":"Object-Oriented Programming","description":"JavaScript supports OOP using prototypes and ES6 classes. Classes enable defining blueprints for objects, including properties and methods. Key concepts include inheritance, encapsulation, and polymorphism, allowing complex and reusable code structures.","example":"class Animal {\\n  constructor(name) { this.name = name; }\\n  speak() { console.log(`${this.name} makes a noise.`); }\\n}\\nclass Dog extends Animal {\\n  speak() { console.log(`${this.name} barks.`); }\\n}\\nconst dog = new Dog(\'Rex\');\\ndog.speak();"},{"level":17,"title":"Promises and Async/Await","description":"Promises represent future values in asynchronous code, helping manage sequences of async tasks. Async/await syntax makes asynchronous code look synchronous, simplifying complex chains and improving readability.","example":"const fetchData = () => new Promise(resolve => setTimeout(() => resolve(\'data\'), 1000));\\n\\nasync function getData() {\\n  const data = await fetchData();\\n  console.log(data);\\n}\\ngetData();"},{"level":18,"title":"JavaScript Design Patterns","description":"Design patterns provide reusable solutions to common coding problems. Familiar patterns in JavaScript include Module, Singleton, Factory, Observer, and Prototype. Understanding these helps create modular, maintainable, and scalable code.","example":"// Singleton pattern example\\nconst Singleton = (function() {\\n  let instance;\\n  function createInstance() {\\n    return { name: \'SingletonInstance\' };\\n  }\\n  return {\\n    getInstance: function() {\\n      if (!instance) instance = createInstance();\\n      return instance;\\n    }\\n  };\\n})();"},{"level":19,"title":"Memory Management and Optimization","description":"Effective JavaScript programming requires awareness of memory usage. Understanding garbage collection, avoiding memory leaks, and writing optimized code improves performance especially in large-scale or long-running apps.","example":"// Example: Avoid global variables to prevent memory leaks\\nfunction process() {\\n  let localVar = \'temp\';\\n  // localVar is eligible for garbage collection when process() ends\\n}"},{"level":20,"title":"Testing and Debugging","description":"Testing ensures code works as expected; JavaScript has tools like Jest, Mocha, and Jasmine for unit testing. Debugging techniques include using browser developer tools, console logging, and step-by-step code tracing to locate and fix bugs.","example":"// Jest test example\\ntest(\'adds 1 + 2 to equal 3\', () => {\\n  expect(1 + 2).toBe(3);\\n});"}]}}')}};